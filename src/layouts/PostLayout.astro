---
import { Icon } from 'astro-icon/components';
import { Picture } from 'astro:assets';
import { formatISO } from 'date-fns';
import readingTime from 'reading-time';
import Callout from '../components/Callout.astro';
import HeaderContainer from '../components/HeaderContainer.astro';
import HeaderTitle from '../components/HeaderTitle.astro';
import MainContainer from '../components/MainContainer.astro';
import SectionMarginTitle from '../components/SectionMarginTitle.astro';
import SimpleTag from '../components/SimpleTag.astro';
import { formatPostDate } from '../utils/helper';
import BaseLayout from './BaseLayout.astro';

import og from '../images/og/posts.jpg';

const { title, excerpt, date, lastUpdated, tags, visual } = Astro.props;

const ogImage = visual ?? og;

const canonicalUrl = new URL(Astro.url.pathname, Astro.site);

const content = await Astro.slots.render('default');
---

<BaseLayout
	title={title}
	description={excerpt}
	image={ogImage.src}
	isArticle={true}>
	<header slot="header" class="main-grid -mb-12">
		<HeaderContainer>
			{
				visual && (
					<div class="md:-mx-16">
						<Picture
							src={visual}
							alt={`Visual for: ${title}`}
							class="rounded-lg"
						/>
					</div>
				)
			}
			<HeaderTitle>
				<h1 class="p-name">{title}</h1>
				<div class="flex flex-wrap items-center gap-2 mt-2 select-none">
					<SimpleTag icon="calendar-dots"
						>{formatPostDate(new Date(date))}<time class="dt-published hidden"
							>{formatISO(new Date(date))}</time
						></SimpleTag
					>
					<a href={canonicalUrl} class="u-url hidden">Canonical URL to post</a>
					{
						lastUpdated &&
							new Date(lastUpdated).toDateString() !==
								new Date(date).toDateString() && (
								<SimpleTag icon="clock-clockwise">
									Last updated:
									{formatPostDate(new Date(lastUpdated))}
								</SimpleTag>
							)
					}
					<span class="text-gray-500">&#183;</span>
					<span class="font-mono text-sm text-gray-500"
						>{readingTime(content).text}</span
					>
					{
						tags.length > 0 && (
							<>
								<span class="text-gray-500">&#183;</span>
								{tags.map((tag: string) => (
									<SimpleTag icon="tag">{tag}</SimpleTag>
								))}
							</>
						)
					}
				</div>
			</HeaderTitle>
		</HeaderContainer>
	</header>
	<MainContainer>
		<SectionMarginTitle>
			<a
				href="/posts"
				class="flex items-center gap-2 no-highlight no-underline text-gray-500"
				slot="aside">
				<Icon name="ph:arrow-bend-up-left" class="w-5 h-5" />
				<span>Back to all posts</span>
			</a>
			<div class="e-content">
				<slot />
			</div>
			<div class="mt-6">
				<Callout icon="envelope" title="What are your thoughts on this post?">
					<div class="space-y-2">
						<p>
							Iâ€™d love to hear from you! Please write me an email by clicking <a
								href="/hi"
								target="_blank"
								rel="noopener">this link</a
							>.
						</p>
						<p>I reply to every email I receive!</p>
					</div>
				</Callout>
			</div>
		</SectionMarginTitle>
	</MainContainer>
</BaseLayout>
