---
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import { default as cn } from 'classnames';

const { milestone, hideBadge, showImage } = Astro.props;
---

<article class="p-6 border rounded-lg flex flex-col gap-8">
	{
		showImage && (
			<Image
				src={milestone.data.visual}
				alt="Visual"
				class="block rounded-md"
			/>
		)
	}
	<div class="flex flex-col items-start gap-2 relative">
		<a
			href={milestone.data.link}
			target="_blank"
			class="absolute top-0 right-0 select-none text-gray-600 hover:text-gray-800">
			<Icon name="ph:link" class="w-5 h-5" />
		</a>
		{
			!hideBadge && (
				<div
					class={cn(
						'rounded transition-all items-center gap-2 no-underline px-2 py-1 border inline-flex select-none font-mono text-sm',
						{
							'bg-emerald-50 text-emerald-600 border-emerald-200':
								milestone.data.type === 'personal',
							'bg-amber-50 text-amber-600 border-amber-200':
								milestone.data.type === 'cv',
							'bg-blue-50 text-blue-600 border-blue-200':
								milestone.data.type === 'project',
						}
					)}>
					{() => {
						switch (milestone.data.type) {
							case 'personal':
								return (
									<>
										<Icon name="ph:heart" class="w-5 h-5" />
										<span>Personal</span>
									</>
								);
							case 'cv':
								return (
									<>
										<Icon name="ph:read-cv-logo" class="w-5 h-5" />
										<span>CV</span>
									</>
								);
							case 'project':
								return (
									<>
										<Icon name="ph:laptop" class="w-5 h-5" />
										<span>Project</span>
									</>
								);
							default:
								return (
									<>
										<Icon name="ph:selection" class="w-5 h-5" />
										<span>Unknown</span>
									</>
								);
						}
					}}
				</div>
			)
		}
		<h3 class="text-lg font-medium">{milestone.data.title}</h3>
		<p class="text-sm">{milestone.data.shortDescription}</p>
		<div class="flex items-center gap-2 mt-2 select-none">
			<div
				class="rounded-full bg-gray-50 text-gray-600 transition-all items-center gap-2 no-underline px-2 py-1 inline-flex font-mono text-sm">
				<Icon name="ph:at" class="w-4 h-4" />
				{milestone.data.company}
			</div>
			{
				milestone.data.tags.length > 0 && (
					<>
						<span>&#8901;</span>
						{milestone.data.tags.map((tag: string) => (
							<div class="rounded-full bg-gray-50 text-gray-600 transition-all items-center gap-2 no-underline px-2 py-1 inline-flex font-mono text-sm">
								<Icon name="ph:tag" class="w-4 h-4" />
								<span>{tag}</span>
							</div>
						))}
					</>
				)
			}
			{
				milestone.data.dateEnd && (
					<>
						<span>&#8901;</span>

						<div class="rounded-full bg-gray-50 text-gray-600 transition-all items-center gap-2 no-underline px-2 py-1 inline-flex font-mono text-sm">
							<Icon name="ph:calendar-dots" class="w-4 h-4" />
							<span>
								until {new Date(milestone.data.dateEnd).getFullYear()}
							</span>
						</div>
					</>
				)
			}
		</div>
	</div>
</article>
